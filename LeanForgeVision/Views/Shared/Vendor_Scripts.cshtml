
<button type="button" class="fixed z-50 px-4 text-white border-gray-200 shadow-lg h-11 ltr:right-0 rtl:left-0 bg-purple ltr:rounded-l-md rtl:rounded-r-md top-1/3" @@click="$store.app.direction = ($store.app.direction === 'ltr') ? 'rtl' : 'ltr'"><span class="rtl:hidden">RTL</span> <span class="ltr:hidden">LTR</span></button>

<script src="~/assets/libs/@("@")alpinejs/persist/cdn.min.js"></script>
<script src="~/assets/libs/@("@")alpinejs/collapse/cdn.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    var fetchTodayPlanTotalsUrl = '@Url.Action("GetTodayPlanTotals", "Shipping")';
    var fetchTodayToySortedTotalUrl = '@Url.Action("GetTotalToySortedToday", "Shipping")';
    var fetchTodayPlanAndSortedTotalsUrl = '@Url.Action("GetTodayPlanAndSortedTotals", "Shipping")';
    var fetchpercentageTotalOrdersPlannedYesterdayAndTodayUrl = '@Url.Action("GetYesterdayAndTodayPlanTotalsJson", "Shipping")';
    var fetchpercentageTotalToySortedYesterdayAndTodayUrl = '@Url.Action("GetYesterdayAndTodayTotalSortedJson", "Shipping")';
    var fetchTodayActiveGateUrl = '@Url.Action("GetTotalGateStatus5", "Gate")';
    var fetchPercentageTotalActiveGateYesterdayToday = '@Url.Action("GetActiveGateCounts", "Gate")';
    var fetchTotalIssuesTodayUrl = '@Url.Action("GetTodayProblemCount", "Problem")';
    var fetchPercentageTotalIssuesYesterdayAndTodayUrl = '@Url.Action("GetProblemCountsTodayAndYesterday", "Problem")';
    var fetchTotalPlannedWeeklyChart = '@Url.Action("GetWeeklyPlannedTotals", "Shipping")';
    var fetchTotalSortedWeeklyChart = '@Url.Action("GetWeeklySortedTotals", "Shipping")';
    var fetchTotalProblemWeeklyChart = '@Url.Action("GetWeeklyProblemReports","Problem")';
    var fetchTotalGateActiveWeeklyChart = '@Url.Action("GetWeeklyActiveGateCounts", "Gate")';
    var insertAuditLogUrl = '@Url.Action("InsertAuditLog","Audit")';



    $(document).ready(function () {
        fetchTodayPlanAndSortedTotals();
        fetchYesterdayAndTodayToySortedTotals();
        fetchYesterdayAndTodayPlanTotals();
        fetchTotalActiveGate();
        fetchTotalIssuesToday();
        fetchPercentageTotalGateActiveYesterdayAndToday();
        fetchPercentageIssuesTodayAndYesterday();
        fetchWeeklyTotalPlannedChart();
        fetchWeeklyTotalSortedChart();
        fetchWeeklyTotalProblemChart();
        fetchWeeklyTotalGateActiveChart();
        // Memulai countdown setiap 10 detik dan memanggil refreshDashboardData setelah selesai
        startCountdown(30, "timer", function () {
            console.log("Timer selesai!");
            refreshDashboardData(); // Memanggil refreshDashboardData setelah countdown selesai
        });

    });

    function startCountdown(durationInSeconds, timerElementId, onComplete) {
        let timeLeft = durationInSeconds;
        const timerElement = document.getElementById(timerElementId);

        if (!timerElement) {
            console.error(`Element with ID '${timerElementId}' not found.`);
            return;
        }

        // Set initial timer value
        timerElement.textContent = timeLeft;

        // Define the countdown interval
        const countdownInterval = setInterval(() => {
            timeLeft--;
            if (timeLeft <= 0) {
                clearInterval(countdownInterval);  // Hentikan countdown saat selesai
                timerElement.textContent = '0';  // Tampilkan '0' setelah selesai
                if (typeof onComplete === "function") onComplete();  // Panggil onComplete

                // Mulai ulang countdown setelah selesai (loop)
                startCountdown(durationInSeconds, timerElementId, onComplete);
            } else {
                timerElement.textContent = timeLeft;
            }
        }, 1000);
    }

    function refreshDashboardData() {
        const refreshFunctions = [
            fetchTodayPlanAndSortedTotals,
            fetchYesterdayAndTodayToySortedTotals,
            fetchYesterdayAndTodayPlanTotals,
            fetchTotalActiveGate,
            fetchTotalIssuesToday,
            fetchPercentageTotalGateActiveYesterdayAndToday,
            fetchPercentageIssuesTodayAndYesterday,
            fetchWeeklyTotalPlannedChart,
            fetchWeeklyTotalSortedChart,
            fetchWeeklyTotalProblemChart,
            fetchWeeklyTotalGateActiveChart
        ];

        refreshFunctions.forEach(func => {
            if (typeof func === "function") {
                func(); // ✅ hanya dipanggil kalau fungsinya ada
            }
        });
        refreshData();
    }


    function fetchTodayPlanAndSortedTotals() {
        $.ajax({
            url: fetchTodayPlanAndSortedTotalsUrl, // URL to fetch today's plan and sorted totals
            type: 'GET',
            dataType: 'json',
            success: function (response) {
                if (response) {
                    $('#totalOrdersPlanned').text(response.planned ?? '0');
                    $('#totalOrdersProcessed').text(response.sorted ?? '0');
                    $('#totalOrdersPending').text(response.pending ?? '0');
                } else {
                    $('#totalOrdersPlanned').text('0');
                    $('#totalOrdersProcessed').text('0');
                    $('#totalOrdersPending').text('0');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching plan and sorted totals:', error);
                $('#totalOrdersPlanned').text('0');
                $('#totalOrdersProcessed').text('0');
                $('#totalOrdersPending').text('0');
            }
        });
    }

    function fetchYesterdayAndTodayTotals() {
        // Gunakan Promise.all untuk mengeksekusi kedua request secara bersamaan
        Promise.all([fetchYesterdayAndTodayPlanTotals(), fetchYesterdayAndTodayToySortedTotals()])
            .then(results => {
                // Bila kedua permintaan berhasil
                console.log('Plan and Toy Sorted totals fetched successfully');
            })
            .catch(error => {
                // Bila salah satu permintaan gagal
                console.error('Error fetching data:', error);
                resetDisplay();
            });
    }

    function fetchYesterdayAndTodayPlanTotals() {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: fetchpercentageTotalOrdersPlannedYesterdayAndTodayUrl,
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        const percentageChange = response.percentageChange;
                        const changeDirection = response.changeDirection;

                        updatePercentageDisplay('#percentageTotalOrdersPlannedYesterdayAndToday', percentageChange);
                        updateBackgroundColor('#percentageTotalOrdersPlannedYesterdayAndToday', changeDirection);
                        resolve();  // Resolve promise when the data is processed
                    } else {
                        console.log('No data found or error in response');
                        resetDisplay();
                        reject('No data or error in response');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching the plan totals:', error);
                    resetDisplay();
                    reject(error);
                }
            });
        });
    }

    function fetchYesterdayAndTodayToySortedTotals() {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: fetchpercentageTotalToySortedYesterdayAndTodayUrl, // Adjust URL accordingly
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    if (response.success) {
                        const percentageChange = response.percentageChange;
                        const changeDirection = response.changeDirection;

                        updatePercentageDisplay('#percentageTotalToySortedYesterdayAndToday', percentageChange);
                        updateBackgroundColor('#percentageTotalToySortedYesterdayAndToday', changeDirection);
                        resolve();  // Resolve promise when the data is processed
                    } else {
                        console.log('No data found or error in response');
                        resetDisplay();
                        reject('No data or error in response');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching the toy sorted totals:', error);
                    resetDisplay();
                    reject(error);
                }
            });
        });
    }

    function fetchTotalActiveGate() {
        $.ajax({
            url: fetchTodayActiveGateUrl,
            type: "GET",
            dataType: "json",
            success: function (response) {
                if (response && response.TotalGateStatus5 !== undefined) {
                    $("#totalActiveGate").text(response.TotalGateStatus5);
                } else {
                    $("#totalActiveGate").text("0");
                }
            },
            error: function () {
                $("#totalActiveGate").text("Error");
            }
        });
    }


    function fetchPercentageTotalGateActiveYesterdayAndToday() {
        $.ajax({
            url: fetchPercentageTotalActiveGateYesterdayToday,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                if (data) {
                    // Update percentage text
                    updatePercentageDisplay('#percentageTotalGateActiveYesterdayAndToday', data.PendingDifferencePercentage);

                    // Tentukan arah perubahan
                    let changeDirection = "No Change";
                    if (data.PendingStatus === "Increase") {
                        changeDirection = "Increased";
                    } else if (data.PendingStatus === "Decrease") {
                        changeDirection = "Decreased";
                    }

                    // Update background color
                    updateBackgroundColor('#percentageTotalGateActiveYesterdayAndToday', changeDirection);
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching active gate counts:', error);
            }
        });
    }

    function fetchTotalIssuesToday() {
        $.ajax({
            url: fetchTotalIssuesTodayUrl,
            method: 'GET',
            success: function (result) {
                $("#totalIssuesToday").text(result);
            },
            error: function () {
                $("#totalIssuesToday").text("Failed to load");
            }
        });
    }

    function fetchPercentageIssuesTodayAndYesterday() {
        $.ajax({
            url: fetchPercentageTotalIssuesYesterdayAndTodayUrl,
            method: 'GET',
            success: function (result) {
                const percentage = result.percentage;
                const trend = result.trend;

                // Map backend trend to UI-friendly label
                let trendLabel = 'No Change';
                if (trend === 'increase') trendLabel = 'Decreased';
                else if (trend === 'decrease') trendLabel = 'Increased';

                // Update text and background color
                updatePercentageDisplay('#percentageTotalIssuesYesterdayAndToday', percentage);
                updateBackgroundColor('#percentageTotalIssuesYesterdayAndToday', trendLabel);
            },
            error: function () {
                $('#percentageTotalIssuesYesterdayAndToday').text('Error').addClass('text-danger');
            }
        });
    }

    function updatePercentageDisplay(elementId, percentageChange) {
        const percentageText = Math.round(percentageChange) + '%';
        $(elementId)
            .text(percentageText)
            .css('font-weight', 'bold');
    }

    function updateBackgroundColor(elementId, changeDirection) {
        // Remove any existing color classes
        $(elementId)
            .removeClass('bg-info/20 text-info bg-success/20 text-success bg-danger/20 text-danger');

        // Map the change direction to corresponding background and text color
        const colorMap = {
            'Increased': 'bg-success/20 text-success',
            'Decreased': 'bg-danger/20 text-danger',
            'No Change': 'bg-info/20 text-info'
        };

        // Apply the appropriate color class if available
        if (colorMap[changeDirection]) {
            $(elementId).addClass(colorMap[changeDirection]);
        }
    }

    function resetDisplay() {
        // Reset all displays
        $('#percentageTotalOrdersPlannedYesterdayAndToday, #percentageTotalToySortedYesterdayAndToday')
            .text('0%')
            .removeClass('bg-success/20 text-success bg-danger/20 text-danger bg-info/20 text-info');
    }

    function fetchWeeklyTotalPlannedChart() {
        $.ajax({
            url: fetchTotalPlannedWeeklyChart, // pastikan ini berisi URL: @Url.Action("GetWeeklyPlannedTotals", "Shipping")
            method: "GET",
            success: function (data) {
                // Fungsi untuk mengonversi format tanggal /Date(1746378000000)/ menjadi objek Date
                function convertDateFormat(dateString) {
                    // Mengambil angka millisecond dari format /Date(1746378000000)/ dan mengonversinya menjadi Date
                    var timestamp = parseInt(dateString.replace("/Date(", "").replace(")/", ""), 10);
                    return new Date(timestamp);
                }

                // Urutkan berdasarkan tanggal
                data.sort((a, b) => convertDateFormat(a.PlanDate) - convertDateFormat(b.PlanDate));

                // Ambil nilai planned dan label tanggal
                var seriesData = data.map(item => item.TotalPlanned);
                var categories = data.map(item => {
                    let rawDate = item.PlanDate;
                    let date = convertDateFormat(rawDate); // Menggunakan fungsi konversi
                    return date.toLocaleDateString("en-GB", {
                        day: '2-digit',
                        month: 'short'
                    }); // contoh: 11 May
                });

                // Ambil 2 terakhir: hari ini dan kemarin
                var today = seriesData[seriesData.length - 1] ?? 0;
                var yesterday = seriesData[seriesData.length - 2] ?? 0;

                // Warna garis: hijau jika naik, merah jika turun
                var chartColor = today >= yesterday ? "#50cd89" : "#f1416c";

                var options = {
                    series: [{
                        data: seriesData,
                    }],
                    chart: {
                        height: 60,
                        type: "line",
                        fontFamily: "Nunito, sans-serif",
                        sparkline: {
                            enabled: true,
                        },
                        dropShadow: {
                            enabled: false,
                        },
                    },
                    stroke: {
                        curve: "smooth",
                        width: 2,
                    },
                    colors: [chartColor],
                    grid: {
                        padding: {
                            top: 5,
                            bottom: 5,
                            left: 5,
                            right: 5,
                        },
                    },
                    tooltip: {
                        x: {
                            formatter: function (val, opts) {
                                return categories[opts.dataPointIndex]; // tampilkan tanggal
                            }
                        },
                        y: {
                            title: {
                                formatter: () => "Total Planned"
                            }
                        }
                    },
                    xaxis: {
                        categories: categories // walaupun sparkline, tetap aman disediakan
                    }
                };

                // Render ke elemen chart
                var chart = new ApexCharts(document.querySelector("#chartTotalOrdersPlannedWeekly"), options);
                chart.render();
            },
            error: function (xhr, status, error) {
                console.error("Failed to load chart data:", error);
            }
        });
    }

    function fetchWeeklyTotalSortedChart() {
        $.ajax({
            url: fetchTotalSortedWeeklyChart,
            method: "GET",
            success: function (data) {
                // Fungsi untuk mengonversi format tanggal /Date(1746378000000)/ menjadi objek Date
                function convertDateFormat(dateString) {
                    // Mengambil angka millisecond dari format /Date(1746378000000)/ dan mengonversinya menjadi Date
                    var timestamp = parseInt(dateString.replace("/Date(", "").replace(")/", ""), 10);
                    return new Date(timestamp);
                }

                // Urutkan berdasarkan tanggal
                data.sort((a, b) => convertDateFormat(a.PlanDate) - convertDateFormat(b.PlanDate));

                // Ambil nilai planned dan label tanggal
                var seriesData = data.map(item => item.TotalSorted);
                var categories = data.map(item => {
                    let rawDate = item.PlanDate;
                    let date = convertDateFormat(rawDate); // Menggunakan fungsi konversi
                    return date.toLocaleDateString("en-GB", {
                        day: '2-digit',
                        month: 'short'
                    }); // contoh: 11 May
                });

                // Ambil 2 terakhir: hari ini dan kemarin
                var today = seriesData[seriesData.length - 1] ?? 0;
                var yesterday = seriesData[seriesData.length - 2] ?? 0;

                // Warna garis: hijau jika naik, merah jika turun
                var chartColor = today >= yesterday ? "#50cd89" : "#f1416c";

                var options = {
                    series: [{
                        data: seriesData,
                    }],
                    chart: {
                        height: 60,
                        type: "line",
                        fontFamily: "Nunito, sans-serif",
                        sparkline: {
                            enabled: true,
                        },
                        dropShadow: {
                            enabled: false,
                        },
                    },
                    stroke: {
                        curve: "smooth",
                        width: 2,
                    },
                    colors: [chartColor],
                    grid: {
                        padding: {
                            top: 5,
                            bottom: 5,
                            left: 5,
                            right: 5,
                        },
                    },
                    tooltip: {
                        x: {
                            formatter: function (val, opts) {
                                return categories[opts.dataPointIndex]; // tampilkan tanggal
                            }
                        },
                        y: {
                            title: {
                                formatter: () => "Total Sorted"
                            }
                        }
                    },
                    xaxis: {
                        categories: categories // walaupun sparkline, tetap aman disediakan
                    }
                };

                // Render ke elemen chart
                var chart = new ApexCharts(document.querySelector("#chartTotalSortedWeekly"), options);
                chart.render();
            },
            error: function (xhr, status, error) {
                console.error("Failed to load chart data:", error);
            }
        });
    }

    function fetchWeeklyTotalProblemChart() {
        $.ajax({
            url: fetchTotalProblemWeeklyChart,
            method: "GET",
            success: function (data) {
                // Fungsi untuk mengonversi format tanggal /Date(1746378000000)/ menjadi objek Date
                function convertDateFormat(dateString) {
                    // Mengambil angka millisecond dari format /Date(1746378000000)/ dan mengonversinya menjadi Date
                    var timestamp = parseInt(dateString.replace("/Date(", "").replace(")/", ""), 10);
                    return new Date(timestamp);
                }

                // Urutkan berdasarkan tanggal
                data.sort((a, b) => convertDateFormat(a.ReportDate) - convertDateFormat(b.ReportDate));

                // Ambil nilai planned dan label tanggal
                var seriesData = data.map(item => item.TotalReport);
                var categories = data.map(item => {
                    let rawDate = item.ReportDate;
                    let date = convertDateFormat(rawDate); // Menggunakan fungsi konversi
                    return date.toLocaleDateString("en-GB", {
                        day: '2-digit',
                        month: 'short'
                    }); // contoh: 11 May
                });

                // Ambil 2 terakhir: hari ini dan kemarin
                var today = seriesData[seriesData.length - 1] ?? 0;
                var yesterday = seriesData[seriesData.length - 2] ?? 0;

                // Warna garis: hijau jika naik, merah jika turun
                var chartColor = today <= yesterday ? "#50cd89" : "#f1416c";

                var options = {
                    series: [{
                        data: seriesData,
                    }],
                    chart: {
                        height: 60,
                        type: "line",
                        fontFamily: "Nunito, sans-serif",
                        sparkline: {
                            enabled: true,
                        },
                        dropShadow: {
                            enabled: false,
                        },
                    },
                    stroke: {
                        curve: "smooth",
                        width: 2,
                    },
                    colors: [chartColor],
                    grid: {
                        padding: {
                            top: 5,
                            bottom: 5,
                            left: 5,
                            right: 5,
                        },
                    },
                    tooltip: {
                        x: {
                            formatter: function (val, opts) {
                                return categories[opts.dataPointIndex]; // tampilkan tanggal
                            }
                        },
                        y: {
                            title: {
                                formatter: () => "Total Problem"
                            }
                        }
                    },
                    xaxis: {
                        categories: categories // walaupun sparkline, tetap aman disediakan
                    }
                };

                // Render ke elemen chart
                var chart = new ApexCharts(document.querySelector("#chartTotalProblemWeekly"), options);
                chart.render();
            },
            error: function (xhr, status, error) {
                console.error("Failed to load chart data:", error);
            }
        });
    }

    function fetchWeeklyTotalGateActiveChart() {
        $.ajax({
            url: fetchTotalGateActiveWeeklyChart,
            method: "GET",
            success: function (data) {
                function convertDateFormat(dateString) {
                    var timestamp = parseInt(dateString.replace("/Date(", "").replace(")/", ""), 10);
                    return new Date(timestamp);
                }

                // Gunakan nama properti yang benar: Date
                data.sort((a, b) => convertDateFormat(a.Date) - convertDateFormat(b.Date));

                var seriesData = data.map(item => item.ActiveGateCount);
                var categories = data.map(item => {
                    let rawDate = item.Date;
                    let date = convertDateFormat(rawDate);
                    return date.toLocaleDateString("en-GB", {
                        day: '2-digit',
                        month: 'short'
                    });
                });

                var today = seriesData[seriesData.length - 1] ?? 0;
                var yesterday = seriesData[seriesData.length - 2] ?? 0;

                var chartColor = today >= yesterday ? "#50cd89" : "#f1416c";

                var options = {
                    series: [{
                        data: seriesData,
                    }],
                    chart: {
                        height: 60,
                        type: "line",
                        fontFamily: "Nunito, sans-serif",
                        sparkline: {
                            enabled: true,
                        },
                        dropShadow: {
                            enabled: false,
                        },
                    },
                    stroke: {
                        curve: "smooth",
                        width: 2,
                    },
                    colors: [chartColor],
                    grid: {
                        padding: {
                            top: 5,
                            bottom: 5,
                            left: 5,
                            right: 5,
                        },
                    },
                    tooltip: {
                        x: {
                            formatter: function (val, opts) {
                                return categories[opts.dataPointIndex];
                            }
                        },
                        y: {
                            title: {
                                formatter: () => "Total Active Gate"
                            }
                        }
                    },
                    xaxis: {
                        categories: categories
                    }
                };

                var chart = new ApexCharts(document.querySelector("#chartTotalGateActiveWeekly"), options);
                chart.render();
            },
            error: function (xhr, status, error) {
                console.error("Failed to load chart data:", error);
            }
        });
    }

    function insertAuditLog(log, messageFromSchedule) {
        console.log("Sending audit log", log);
        $.ajax({
            url: insertAuditLogUrl,
            type: 'POST',
            data: JSON.stringify(log),
            contentType: 'application/json',
            success: function (response) {
                if (response.success) {
                    // Tampilkan pesan dari schedule
                    refreshDashboardData();
                    Swal.fire("Success!", messageFromSchedule, "success");
                } else {
                    alert("Failed to insert audit log: " + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    }













</script>